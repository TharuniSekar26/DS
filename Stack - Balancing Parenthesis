Balanced parenthesis
Write a program to check whether the given parenthesis is balanced or not.



Format:

Input:

The input consists of parenthesis.

Output:

The output consists of a result "Balanced" or "Not Balanced".



Example:

Input:

{()}[]

Output:

Balanced

Hint: {}, [] and () are used.

=============================================================

import java.util.Scanner;

class Node {
    char data;
    Node next;

    public Node(char data) {
        this.data = data;
        this.next = null;
    }
}

class Stack {
    Node top;

    public Stack() {
        this.top = null;
    }

    // Pushes an element onto the stack
    public void push(char data) {
        Node newNode = new Node(data);
        if (top == null) {
            top = newNode;
        } else {
            newNode.next = top;
            top = newNode;
        }
    }

    // Pops an element from the stack
    public char pop() {
        if (top == null) {
            throw new IllegalStateException("Stack is empty");
        } else {
            char data = top.data;
            top = top.next;
            return data;
        }
    }

    // Checks if the stack is empty
    public boolean isEmpty() {
        return top == null;
    }

    // Prints the elements of the stack from top to bottom
    public void printStack() {
        if (top == null) {
            System.out.println("Stack is empty");
        } else {
            Node current = top;
            while (current != null) {
                System.out.print(current.data + " ");
                current = current.next;
            }
        }
    }
}

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String input = scanner.nextLine();
        scanner.close();

        if (isBalanced(input)) {
            System.out.println("Balanced");
        } else {
            System.out.println("Not Balanced");
        }
    }

    public static boolean isBalanced(String str) {
        Stack stack = new Stack();

        for (char ch : str.toCharArray()) {
            if (ch == '{' || ch == '[' || ch == '(') {
                stack.push(ch);
            } else if (ch == '}' || ch == ']' || ch == ')') {
                if (stack.isEmpty()) {
                    return false;
                }
                char last = stack.pop();
                if (!matches(last, ch)) {
                    return false;
                }
            }
        }

        return stack.isEmpty();
    }

    private static boolean matches(char open, char close) {
        return (open == '{' && close == '}') ||
               (open == '[' && close == ']') ||
               (open == '(' && close == ')');
    }
}
