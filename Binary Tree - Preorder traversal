You are given the root node of a binary tree.Print its preorder traversal.



Input Format

The first and the only line of input will contain the node data, all separated by a single space. Since -1 is used as an indication whether the left or right node data exist for root, it will not be a part of the node data.
Constraints

1 <= N <= 10^6
Where N is the total number of nodes in the binary tree.
Time Limit: 1 sec
Output Format

The only line of output prints the preorder traversal of the given binary tree.

Sample Input 0

1 2 3 4 5 6 7 -1 -1 -1 -1 -1 -1 -1 -1
Sample Output 0

1 2 4 5 3 6 7
Sample Input 1

5 -1 -1
Sample Output 1

5
======================================================

import java.util.*;

class Node {
    int data;
    Node left;
    Node right;
    
    Node(int data) {
        this.data = data;
        this.left = null;
        this.right = null;
    }
}

public class Main {
 
    static Node buildTree(String str){
        
        if(str.length()==0 || str.equals("-1")){
            return null;
        }
        
        String ip[] = str.split(" ");
        Node root = new Node(Integer.parseInt(ip[0]));
      
        Queue<Node> queue = new LinkedList<>(); 
        
        queue.add(root);
        
        int i = 1;
        while(queue.size() > 0 && i < ip.length) {
            
            Node currNode = queue.peek();
            queue.remove();

            String currVal = ip[i];
                
            if(!currVal.equals("-1")) {
                currNode.left = new Node(Integer.parseInt(currVal));
                queue.add(currNode.left);
            }
                
            i++;
            if(i >= ip.length)
                break;
                
            currVal = ip[i];

            if(!currVal.equals("-1")) {
                currNode.right = new Node(Integer.parseInt(currVal));
                queue.add(currNode.right);
            }
            i++;
        }
        return root;
    }
    
    static void preorderTraversal(Node root) {
        if (root == null) {
            return;
        }
      System.out.print(root.data+" ");
        preorderTraversal(root.left);
      
        preorderTraversal(root.right);
    }
    
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String s = sc.nextLine();
        Node root = buildTree(s);
        preorderTraversal(root);
    
    }
}
