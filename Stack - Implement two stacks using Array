Implement two stacks using an array
Write a program to implement the two stacks using one array. Consider the size of an array as 1000.



Format:

Input:

Get the number of elements to be inserted in stack 1.
And then, get the elements one by one.
Also, get the number of elements to be inserted in stack 2.
And then, get the elements one by one.
Get the number of elements to be deleted from stack 1.
Get the number of elements to be deleted from stack 2.
Output:

Print "Stack underflow. pop from stack 1 failed" message if the pop operation fails while doing it in stack 1.
Print the elements of stack 1.
Print "Stack underflow. pop from stack 1 failed" message if the pop operation fails while doing it in stack 2.
Print the elements of stack 2.


Example:

Input:

3

2 5 7

2

1 2

4

1

Output:

Stack 1 Elements:

7 5 2 

Stack 2 Elements:

2 1 

Stack underflow. pop from stack 1 failed

Stack 1 Elements:



Stack 2 Elements:

1 


==============================================================

import java.util.Scanner;

class Main {
    int size;
    int[] arr;
    int top1, top2;

    // Constructor to initialize two stacks in a single array of given size
    public Main(int n) {
        size = n;
        arr = new int[n];
        top1 = -1;
        top2 = n;
    }

    // Method to push an element to stack1
    public void push1(int x) {
        if (top1 < top2 - 1) {
            arr[++top1] = x;
        } else {
            System.out.println("Stack Overflow. push to stack 1 failed");
        }
    }

    // Method to push an element to stack2
    public void push2(int x) {
        if (top1 < top2 - 1) {
            arr[--top2] = x;
        } else {
            System.out.println("Stack Overflow. push to stack 2 failed");
        }
    }

    // Method to pop an element from stack1
    public int pop1() {
        if (top1 >= 0) {
            return arr[top1--];
        } else {
            System.out.println("Stack underflow. pop from stack 1 failed");
            return -1;
        }
    }

    // Method to pop an element from stack2
    public int pop2() {
        if (top2 < size) {
            return arr[top2++];
        } else {
            System.out.println("Stack underflow. pop from stack 2 failed");
            return -1;
        }
    }

    // Method to display elements of stack1
    public void displayStack1() {
        System.out.println("Stack 1 Elements:");
        for (int i = top1; i >= 0; i--) {
            System.out.print(arr[i] + " ");
        }
        System.out.println();
    }

    // Method to display elements of stack2
    public void displayStack2() {
        System.out.println("Stack 2 Elements:");
        for (int i = top2; i < size; i++) {
            System.out.print(arr[i] + " ");
        }
        System.out.println();
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        Main stacks = new Main(1000);

        // Read input for stack 1
        int numElementsStack1 = scanner.nextInt();
        for (int i = 0; i < numElementsStack1; i++) {
            int element = scanner.nextInt();
            stacks.push1(element);
        }

        // Read input for stack 2
        int numElementsStack2 = scanner.nextInt();
        for (int i = 0; i < numElementsStack2; i++) {
            int element = scanner.nextInt();
            stacks.push2(element);
        }

       // Display stack 1 elements
        stacks.displayStack1();

        // Display stack 2 elements
        stacks.displayStack2();
        // Read number of elements to be deleted from stack 1
        int numPopStack1 = scanner.nextInt();
        for (int i = 0; i < numPopStack1; i++) {
            stacks.pop1();
        }

        // Read number of elements to be deleted from stack 2
        int numPopStack2 = scanner.nextInt();
        for (int i = 0; i < numPopStack2; i++) {
            stacks.pop2();
        }

        // Display stack 1 elements
        stacks.displayStack1();

        // Display stack 2 elements
        stacks.displayStack2();

        scanner.close();
    }
}
