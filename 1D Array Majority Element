Majority Element

Given an array A of N elements. Find the majority element in the array. A majority element in an array A of size N is an element that appears more than N/2 times in the array.
Expected Time Complexity: O(N).
Expected Auxiliary Space: O(1).

Constraints:

1 <= N <= 107

0 <= Ai <= 106



Example 1:



Input:

N = 3 

A[] = {1,2,3} 

Output:

-1

Explanation:

Since each element in {1,2,3} appears only once so there is no majority element.



Example 2:



Input:

N = 5 

A[] = {3,1,3,3,2} 

Output:

3

Explanation:

Since 3 is present more than N/2 times, so it is the majority element.



=======================================================================================

public class MajorityElement {
    public static int findMajorityElement(int[] A, int N) {
        int candidate = -1;
        int count = 0;

        // Phase 1: Finding the candidate for majority element
        for (int i = 0; i < N; i++) {
            if (count == 0) {
                candidate = A[i];
                count = 1;
            } else if (A[i] == candidate) {
                count++;
            } else {
                count--;
            }
        }

        // Phase 2: Verifying if the candidate is indeed the majority element
        count = 0;
        for (int i = 0; i < N; i++) {
            if (A[i] == candidate) {
                count++;
            }
        }

        if (count > N / 2) {
            return candidate;
        } else {
            return -1; // No majority element
        }
    }

    public static void main(String[] args) {
        int[] A1 = {1, 2, 3};
        int N1 = A1.length;
        System.out.println(findMajorityElement(A1, N1)); // Output: -1

        int[] A2 = {3, 1, 3, 3, 2};
        int N2 = A2.length;
        System.out.println(findMajorityElement(A2, N2)); // Output: 3
    }
}
