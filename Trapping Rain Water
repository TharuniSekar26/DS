Trapping Rain Water
Given an array arr[] of N non-negative integers representing the height of blocks. If width of each block is 1, compute how much water can be trapped between the blocks during the rainy season.
Constraints:

3 <= N <= 107

0 <= Ai <= 108

Example 1:

Input:

T=1

N = 6

arr[] = {3,0,0,2,0,4}

Output:

10

Explanation: 

T denotes the number of test cases.

Example 2:

Input:

T=1

N = 4

arr[] = {7,4,0,9}

Output:

10

Explanation:

Water trapped by the above block of height 4 is 3 units and above block of height 0 is 7 units. So, the total unit of water trapped is 10 units.

===============================================================================================

// Java code to implement of the approach

class solution {

    // Function to return the maximum
    // water that can be stored
    public static int maxWater(int[] arr, int n)
    {

        // To store the maximum water
        // that can be stored
        int res = 0;

        // For every element of the array
        // except first and last element
        for (int i = 1; i < n - 1; i++) {

            // Find maximum element on its left
            int left = arr[i];
            for (int j = 0; j < i; j++) {
                left = Math.max(left, arr[j]);
            }

            // Find maximum element on its right
            int right = arr[i];
            for (int j = i + 1; j < n; j++) {
                right = Math.max(right, arr[j]);
            }

            // Update maximum water value
            res += Math.min(left, right) - arr[i];
        }
        return res;
    }

    // Driver code
    public static void main(String[] args)
    {
        int[] arr = { 0, 1, 0, 2, 1, 0, 1, 3, 2, 1, 2, 1 };
        int n = arr.length;

        System.out.print(maxWater(arr, n));
    }
}

// This code is contributed by Debidutta Rath
